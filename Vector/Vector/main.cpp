// ** Vector ver 0.7

#include <iostream>

using namespace std;

/*

	// ** 1. 데이터 추가(새로운 공간 확보)
	// ** 2. 데이터 삭제
	// ** 3. 데이터를 실행 할 수 있는 공간의 크기
	// ** 4. 현재 삽입되어 있는 원소의 갯수
	// ** 5. 컨테이너의 시작 지점
	// ** 6. 컨테이너의 종료 지점

*/

// 0 0000000 = 0
// 0 0000001 = 1
// 0 0000010 = 2
// 0 0000011 = 3
// 0 0000100 = 4
// 0 0000101 = 5
// 0 0000111 = 6
// 0 0001000 = 7
// 0 0001001 = 8
// 0 0001011 = 9
// 0 0001111 = 10
// 0 0000000 = 11
// 0 0000000 = 12
// 0 0000000 = 13
// 0 0000000 = 14
// 0 0000000 = 15
// 0 0000000 = 16
// .
// .
// .
// 0 1111111 = 127
// 1 0000000

//  00010000 = 16
// -00000110 = 6
// ------------------------
//  (16 - 6 == 16 + (-6))

// ** 2의 보수 시작
// 0 0 0 0 0 1 1 0 = 6
// 1 1 1 1 1 1 1 1
// ------------------------
//
// 1 1 1 1 1 0 0 1
// 1 1 1 1 1 0 0 1 + 1
// ---------------------------

int main(void)
{
	/*
	char n = 127;
	n += 1;
	printf_s("%d\n", n);

	*/

	/*
	char n = 16;
	n += 1;
	n -= +1;
	printf_s("%d\n", n);

	*/

	/*
	char n = 16;
	// 00001000
	//n += -6;
	printf_s("%d\n", n >> 1);
	// >>1  오른쪽으로 한칸 밀어낸다.

	*/

	/*
	// 나누기를 해야 할 때에는 *로 대체할 수 있을지 확인해보고
	int n = 1920 / 2;
	int n = 1920 * 0.5f;
	*/
	
	
	/*
	 // 배열은 2의 n 승으로 하는게 좋다. ex) [1] [2] [4] [8] [16] [32] [64] [128] ~
	//  int Vector[10]; ㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁ 10개의 원소
	// (16 - (8 - 2)) 10으로 만들게 되면 이런 과정 이 필요하여 2의 n승으로 하는게 좋다.
	
	//const int MAX = 16;
		int Vector[16];

		int iLength = 10;

		for (i = 0; i < iLength; ++i)
		{
			cout << Vector[i] << endl;
		};

		

	*/
	
	/*
	// 배열은 0이 아닌 값으로만 초기화가 가능하다.
	// 배열은 상수 값으로만 초기화가 가능하다.

	// 아래와 같이 사용한다면 위 조건은 무시할 수 있다.
	int Size = 0;
	int iter = 0;

	int* Vector = new int[Size]; // 길이가 아니라 크기가 된다. 배열이 아니다. 배열처럼 사용하는 것이다.

	Vector[iter];
	*/

	/*
	// 배열은 아니지만 배열 처럼 사용할 수 있다.
	int Size = 10;
	int iter = 0;

	int* Vector = new int[Size]; 

	for (int i = 0; i < Size; ++i)
		Vector[i] = i;
	
	//for (int i = 0; i < Size; ++i)
	//	cout << Vector[i] << endl;

	// 지정한 크기를 넘으면 문제가 될 수 있다.
	for (int i = 0; i < 11; ++i)
		cout << Vector[iter++] << endl;


	*/
	
	return 0;
}

/*
	char str1[2][5]
	{
		{'A','B','C','D','E'},
		{'F','G','H','I','J'}
	};

	char* str2[2] =
	{
		{(char*)"ABCD"},
		{(char*)"EFGH"}
	};

	for (int i = 0; i < 5; ++i)
		cout << (*str1)[i];

	cout << endl;

	printf_s("%s\n", str2[0]);

	*/